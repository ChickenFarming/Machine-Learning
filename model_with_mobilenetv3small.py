# -*- coding: utf-8 -*-
"""Model with MobileNetV3Small.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lesvGcn3vABZHfAqsFbx2XtRuNZI-98A

# Load Library
"""

import os
import time
import shutil
import pathlib
import itertools
import cv2
import numpy as np
import pandas as pd
import seaborn as sns
sns.set_style('darkgrid')
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam, Adamax
from tensorflow.keras.metrics import categorical_crossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Activation, Dropout, BatchNormalization
from tensorflow.keras import regularizers

# Ignore Warnings
import warnings
warnings.filterwarnings("ignore")

print ('modules loaded')

"""# Path Directory"""

from google.colab import drive
drive.mount('/content/drive')

data_dir = '/content/drive/MyDrive/PROJECT CAPSTONE/Train'
csv_dir = '/content/drive/MyDrive/PROJECT CAPSTONE/train_data.csv'

"""# Split Data"""

def split_data(data_dir, csv_dir):
    df = pd.read_csv(csv_dir)
    df.columns = ['filepaths', 'labels']
    df['filepaths'] = df['filepaths'].apply(lambda x: os.path.join(data_dir, x))
    nama_penyakit = df['labels']
    train_df, dummy_df = train_test_split(df, train_size=0.8, shuffle=True, random_state=42, stratify=nama_penyakit)
    nama_penyakit = dummy_df['labels']
    valid_df, test_df = train_test_split(dummy_df, train_size=0.5, shuffle=True, random_state=123, stratify=nama_penyakit)

    return train_df, valid_df, test_df

train_df, valid_df, test_df = split_data(data_dir, csv_dir)

"""# Data Generator"""

def create_generator(train_df, valid_df, test_df, batch_size, class_mode, target_size):
    #penentuan batch
    ts_length = len(test_df)
    test_batch_size = max(sorted([ts_length // n for n in range(1, ts_length + 1) if ts_length%n == 0 and ts_length/n <= 80]))
    test_steps = ts_length // test_batch_size

    #augmentasi data
    def scalar(img):
        return img

    tr_gen = ImageDataGenerator(preprocessing_function= scalar, horizontal_flip= True)
    ts_gen = ImageDataGenerator(preprocessing_function= scalar)

    train_generator = tr_gen.flow_from_dataframe(train_df,
                                            x_col='filepaths',
                                            y_col='labels',
                                            batch_size=batch_size,
                                            class_mode=class_mode,
                                            target_size=target_size,
                                            shuffle= True)
    valid_generator = tr_gen.flow_from_dataframe(valid_df,
                                            x_col='filepaths',
                                            y_col='labels',
                                            batch_size=batch_size,
                                            class_mode=class_mode,
                                            target_size=target_size,
                                            shuffle= True)
    test_generator = ts_gen.flow_from_dataframe(test_df,
                                            x_col='filepaths',
                                            y_col='labels',
                                            batch_size=batch_size,
                                            class_mode=class_mode,
                                            target_size=target_size,
                                            shuffle= False)


    return train_generator, valid_generator, test_generator

train_generator, validation_generator, test_generator = create_generator(train_df, valid_df, test_df, batch_size=40,class_mode='categorical', target_size=(224, 224))

"""# Model"""

from tensorflow.keras.applications import MobileNetV3Small

def create_model():
  model = tf.keras.models.Sequential([
    MobileNetV3Small(include_top=False, weights="imagenet", input_shape=(224, 224, 3), pooling='max'),
    BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001),
    Dense(215, kernel_regularizer=regularizers.l2(l=0.016), activity_regularizer=regularizers.l1(0.006),
          bias_regularizer=regularizers.l1(0.006), activation='relu'),
    Dropout(rate=0.35, seed=123),
    Dense(4, activation='softmax')
  ])

  model.compile(optimizer=tf.keras.optimizers.Adamax(learning_rate=0.001),
                loss='categorical_crossentropy', metrics=['accuracy'])

  return model

batch_data, batch_labels = next(train_generator)
print("Shape of batch data:", batch_data.shape)
print("Shape of batch labels:", batch_labels.shape)

model = create_model()

history = model.fit(train_generator,
                    epochs=15,
                    verbose=1,
                    validation_data=validation_generator,
                    validation_steps= None,
                    shuffle= False)